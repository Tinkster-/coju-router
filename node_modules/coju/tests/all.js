{
  let test = require('simple-cli-dtester');
  let coju = require('coju');

  test('coju', function(funk) {
    test('Coju middleware objects', function() {
      if (coju.hasOwnProperty('middlewares')) {
        funk.success('coju#middlewares');
      } else {
        funk.error('coju#middlewares');
      }

      if (coju.hasOwnProperty('middlewareIndexesByName')) {
        funk.success('coju#middlewareIndexesByName');
      } else {
        funk.error('coju#middlewareIndexesByName');
      }
    });

    test('Coju options object', function() {
      if (coju.hasOwnProperty('options')) {
        funk.success('coju#options');
      } else {
        funk.error('coju#options');
      }

      if (coju.options.hasOwnProperty('events')) {
        funk.success('coju.options#events');
      } else {
        funk.error('coju.options#events');
      }

      test('coju#configure', function() {
        coju.configure({
          "events" : {
            "request" : false
          }
        });

        if (coju.options.events.request) {
          funk.error('Failed to set options');
        } else {
          funk.success('Successfully changed options');
        }
      });
    });

    test('Adding middleware', function() {

      function myMiddleware() {}

      test('coju#on', function() {
        coju.on('request', myMiddleware);

        if (coju.middlewareIndexesByName.hasOwnProperty('myMiddleware')) {
          funk.success('coju - registered myMiddleware on request');
        } else {
          funk.error('coju - failed to register myMiddleware on request');
        }
      });

      test('coju#off', function() {
        coju.off('request', myMiddleware);

        if (!coju.middlewareIndexesByName.hasOwnProperty('myMiddleware')) {
          funk.success('coju - deregistered myMiddleware on request');
        } else {
          funk.error('coju - failed to deregister myMiddleware on request');
        }
      });
    });

    test('coju#listen', function() {
      let server = coju.listen(1811);

      if (server) {
        funk.success('Server started successfully on port 1811');
      } else {
        funk.error('Failed to start server on port 1811');
      }

      server.close();
    });
  });
}