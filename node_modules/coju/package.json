{
  "name": "coju",
  "version": "0.0.3",
  "description": "Event based server wrapper that adds a middleware stack. Uses available harmony features.",
  "main": "index.js",
  "scripts": {
    "test": "node --harmony --use_strict tests/all.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/tinkster-/coju.git"
  },
  "keywords": [
    "Http",
    "wrapper"
  ],
  "author": {
    "name": "Dave Mackintosh"
  },
  "license": "MIT",
  "readme": "# Coju\n\nA name from some random website that generated random names. No meaning. Not going to use any buzz-words like *\"Opinionated\"* or *\"super ballsy framework to make your cat sing showtunes\"*...\n\n### Problem\nThe problem with existing frameworks is they do a lot more than the average developer uses, this is part of the industry standard for some reason. Everything needs to do everything. **bullshit**\n\nMore importantly, there aren't many frameworks that strive to use the best of the available technology and developers happily settle for living in an umma-gumma land of dreams.\n\nMost modules aren't even strict compliant which is a ball-ache for developers who want to use a strict environment.\n\n### Solution - Wrap the Http object in a strict smoking jacket\n\nJust a simple wrapper for the http object, a bit like connect but strict compatible and using [Harmony (ES6)][1] features as they become available for the type of developer that might say \"Yolo\" (even sarcastically)\n\n### Getting started\n\nTo create a server you must first know how to run Node with [strict mode][2] enabled. This breaks a *LOT* of modules. a **LOT** of modules, actually **most** modules. I can't stress that enough, **shame** on JS devs.\n\nAlso; unfortunately, due to the harmony-ess of this project, this is also not compatible with Node JS versions < [`0.11.7`][3]; although I recommend [`0.11.9`][4] since the `0.11.7` release has a few bugs from what I can see on *26/2/2014*.\n\nThis version requirement will increase as more Harmony features are added to V8 and decrease as they stabalise but development of these futuristic strains will happen on new branches specifically for people living on the edge. YOLO.\n\n![YOLO](http://img.pandawhale.com/post-3972-Crazy-Pug-GIFs-LHwi.gif)\n\nPlease don't report a bug if you're getting errors and can trace it to a module that isn't strict compliant or just has a bug in it. Use your noggin and `node debug --harmony --use_strict yourapp.js` to find your culprit and then report bugs.\n\nTo run Coju you must run node with two flags:\n\n    NODE_ENV=development node --harmony --use_strict yourapp.js\n    \nOtherwise you're going to get a lot of errors around the new syntax.\n\nTo get started you'll need to create a server, this is pretty simple to be honest as this is just a wrapper for dealing with some normal http stuff in Node JS.\n\n\t{\n      require('coju').listen(1811);\n    }\n    \nMuch like [Connect][5] (which, by the way is awesome) Coju has a \"middleware\" philosophy with slightly less verbosity/guesswork.\n\n* No need for a configure block, although one is available for options/optimisation.\n* None of this set/get string stuff. Annoying. This isn't PHP.\n* Doesn't come \"packaged\" with any other gumph besides core code.\n* Doesn't care what order middleware is loaded in. [`Http.Server`][6] is an `EventEmitter` and will work that way.\n\n###Building your project on coju\n\nBuilding a site on coju is like building any other node/Connect project, the concept of modules, servers and all that other stuff is the same. All coju offers is a neatly gift-wrapped http service for capturing requests and modifying responses via a series of middleware.\n\nYour main entry point will look something like this, for a simple hello world example\n\n**index.js**\n\n    {\n      let coju = require('coju');\n    \t\t\n      coju.on('request', function(req, res) {\n\t    res.writeHead(200, {'Content-Type': 'text/html'});\n\t    res.end(\"<h1>Hello World.</h1>\");\n\t  });\n    \t\t\n      coju.listen(1811);\n    }\n\nWhile the notion of a built in router seems clever and helpful, any modules that aren't core to the http service should be external and thus managed so. All extra functionality will be handled this way going forwards.\n\n`coju` has a simple api and a very small number of \"types\" to keep shit simple, frameworks these days all seem convoluted and voodoo. Not `coju`.\n\n##coju-core API\n\nSee here for documentation on coju core.\n\n####`coju()`\n\n**type** *Function*  \n**access** *Public*  \n**return** *Function*  \n**stability** *6: Testing*\n\n`coju` is a class (in the loosest possible usage of the word until we get classes/modules in Harmony) and simply interjects a very lightweight system in the middle for using middleware easily.\n\n---\n\n    {\n      require('coju').listen(1811);\n    }\n    \n####`coju.configure(json options)`\n\n**type** *Function*  \n**access** *Public*  \n**return** *void*  \n**stability** *6: Testing*\n\nThe default configuration of `coju` should keep most people happy but there are some bottleneck features that might not be necessary that can be switched off easily inside of this function. The below example shows all currently configurable options.\n\nDebug will be true if your `NODE_ENV` is set to development and false if it is equal to anything else.\n\n---\n\n\tcoju.configure({\n      \"debug\"  : true,\n      \"events\" : {\n        \"request\"       : true,\n        \"close\"         : true,\n        \"checkContinue\" : true,\n        \"continue\"      : true,\n        \"connect\"       : true,\n        \"upgrade\"       : true,\n        \"clientError\"   : true\n      }\n    });\n    \n\n####`coju.on|off(string eventName, Function callback)`\n\n**type** *Function*  \n**access** *Public*  \n**return** *Void*  \n**stability** *6: Testing*\n\n`coju` uses Nodes default list of events from the `http.Server` object, to view all the available event subscriptions please [read the documentation][7].\n\nCoercly, all the above events can be unsubscribed from by using the `coju.off` method with a similar syntax.\n\nTo use this most efficiently, **USE NAMED FUNCTIONS** otherwise it has to index and check indexes and blah blah. Named functions simply win.\n\n####Subscription\n\n\t{\n    \tlet coju = require('coju');\n    \t\t\n    \tcoju.on('request', function myFirstCojuMiddleware(req, res) {\n\t\t  res.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t  res.end(\"Hello World.\");\n\t\t});\n    \t\t\n    \tcoju.listen(1811);\n    }\n    \n####Unsubscribing from events\n\n\t{\n    \tlet coju = require('coju');\n    \t\n    \tcoju.on('request', function myFirstCojuMiddleware(req, res) {\n\t\t  res.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t  res.end(\"Hello World.\");\n\t\t});\n    \t\t\n    \tcoju.off('request', function myFirstCojuMiddleware(req, res) {\n\t\t  res.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t  res.end(\"Hello World.\");\n\t\t});\n    \t\t\n    \tcoju.listen(1811);\n    }\n\n\n[1]: http://wiki.ecmascript.org/doku.php\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n[3]: http://nodejs.org/docs/v0.11.7/api/\n[4]: http://nodejs.org/docs/v0.11.9/api/\n[5]: http://www.senchalabs.org/connect/\n[6]: http://nodejs.org/api/http.html\n[7]: http://nodejs.org/docs/v0.11.9/api/all.html#all_class_http_server",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tinkster-/coju/issues"
  },
  "homepage": "https://github.com/tinkster-/coju",
  "_id": "coju@0.0.3",
  "dist": {
    "shasum": "3bab6213d23c7d30f7e3d31311dcda6d2f83a90e"
  },
  "_from": "coju@",
  "_resolved": "https://registry.npmjs.org/coju/-/coju-0.0.3.tgz"
}
